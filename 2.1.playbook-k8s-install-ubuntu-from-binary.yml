---
- name: Install Kubernetes in Ubuntu
  hosts: control_plane
  become: true
  vars_files:
    - variables.yml

  tasks:
    - name: Install socat package for Ubuntu
      apt:
        name: socat
        state: present

    - name: Install conntrack package for Ubuntu 
      apt:
        name: conntrack
        state: present

    - name: Disable swap
      command: swapoff -a
    
    - name: Disable swap in /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^(.+?\s+swap\s+sw\s+.+?)$'
        replace: '#\1'
    
    - name: Modify the nameserver in resolv.conf
      replace:
        path: /etc/resolv.conf
        regexp: '^(.+?\s+nameserver\s+.+?)$'
        replace: 'nameserver 8.8.8.8 8.8.4.4'
    
    - name: Create iptables rule file for K8s
      file:
        path: /etc/sysctl.d/k8s.conf
        state: touch
        mode: 0644

    - name: Empty file content /etc/sysctl.d/k8s.conf
      copy:
        content: ""
        dest: /etc/sysctl.d/k8s.conf

    - name: Ensure iptables tooling does not use the nftables backend
      lineinfile:
        path: /etc/sysctl.d/k8s.conf
        state: present
        create: yes
        line: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
    
    - name: Apply sysctl params
      command: sysctl --system

    - name: Make sure that br_netfilter module is loaded
      modprobe:
        name: br_netfilter

    - name: Add br_netfilter module to /etc/modules-load.d/modules.conf
      lineinfile:
        path: /etc/modules-load.d/modules.conf
        state: present
        create: yes
        line: br_netfilter

# Manually download Kubernetes binaries

    - name: Download Kubernetes binaries
      shell: wget https://dl.k8s.io/v{{ k8s_version }}/kubernetes-server-linux-amd64.tar.gz -O /tmp/kubernetes-server-linux-amd64.tar.gz

    - name: Extract Kubernetes binaries to /tmp
      unarchive:
        src: /tmp/kubernetes-server-linux-amd64.tar.gz
        dest: /tmp
        remote_src: true

    - name: Copy Kubernetes binaries to /usr/bin directory
      copy:
        src: /tmp/kubernetes/server/bin/
        dest: /usr/bin
        mode: 0755
        remote_src: true

    - name: Create directory for kubelet service in /etc/systemd/system/kubelet.service.d
      shell: mkdir -p /etc/systemd/system/kubelet.service.d
      become: true

    - name: Create kubeadm config file in /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      file:
        path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
        state: touch
        mode: 0755
      become: true
    
    - name: Fill the content of 10-kubeadm.conf file with kubeadm config
      copy:
        content: |
          [Service]
          Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
          Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
          # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
          EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
          # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
          # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
          EnvironmentFile=-/etc/default/kubelet
          ExecStart=
          ExecStart=/usr/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
        dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      become: true

    - name: Create kubelet service file in /usr/lib/systemd/system/kubelet.service
      file:
        path: /usr/lib/systemd/system/kubelet.service
        state: touch
        mode: 0755
      become: true

    - name: Fill the content of kubelet.service file with kubelet service config
      copy:
        content: |
          [Unit]
          Description=kubelet: The Kubernetes Node Agent
          Documentation=https://kubernetes.io/docs/home/
          Wants=network-online.target
          After=network-online.target

          [Service]
          ExecStart=/usr/bin/kubelet
          Restart=always
          StartLimitInterval=0
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
        dest: /usr/lib/systemd/system/kubelet.service
      become: true

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
      become: true

    - name: Start and enable kubelet.service on boot
      service:
        name: kubelet
        enabled: yes
        state: started

    - name: Download Docker CNI plugins for Kubernetes networking
      shell: wget https://github.com/containernetworking/plugins/releases/download/v1.0.0/cni-plugins-linux-amd64-v1.0.0.tgz -O /tmp/cni-plugins-linux-amd64-v1.0.0.tgz

    - name: Make directory for CNI plugins in /opt/cni/bin
      shell: mkdir -p /opt/cni/bin
      become: true        

    - name: Extract CNI plugins to /opt/cni/bin directory
      unarchive:
        src: /tmp/cni-plugins-linux-amd64-v1.0.0.tgz
        dest: /opt/cni/bin
        remote_src: true
# ========================================

    - name: Check kubeadm version
      command: kubeadm version
      register: kubeadm_version
    
    - name: Print kubeadm version
      debug:
        msg: "{{ kubeadm_version.stdout }}"

    - name: Check kubelet version
      command: kubelet --version
      register: kubelet_version

    - name: Print kubelet version
      debug:
        msg: "{{ kubelet_version.stdout }}"
    
    - name: Check kubectl version
      command: kubectl version --client
      register: kubectl_version 
    
    - name: Print kubectl version
      debug:
        msg: "{{ kubectl_version.stdout }}"